server : 
from flask import Flask, jsonify, request, abort
import mysql.connector
import os

# Konfigurasi Database
db_config = {
    "host": "localhost",
    "user": "root",
    "password": "",
    "database": "buku_db"
}

# Inisialisasi Flask app
app = Flask(__name__)

# Koneksi Database
def get_db_connection():
    return mysql.connector.connect(**db_config)

# Routes
@app.route('/')
def home():
    server_info = {
        "message": "Welcome to the Buku API!",
        "server": "Flask",
        "host": os.getenv('HOST', 'localhost'),
        "port": os.getenv('PORT', '8000'),
        "endpoints": [
            {"method": "POST", "endpoint": "/buku", "description": "Create a new book"},
            {"method": "GET", "endpoint": "/buku", "description": "Get all books"},
            {"method": "GET", "endpoint": "/buku/<int:buku_id>", "description": "Get a book by ID"},
            {"method": "PUT", "endpoint": "/buku/<int:buku_id>", "description": "Update a book by ID"},
            {"method": "DELETE", "endpoint": "/buku/<int:buku_id>", "description": "Delete a book by ID"}
        ]
    }
    return jsonify(server_info)

@app.route("/buku", methods=["POST"])
def create_buku():
    """Tambah buku baru."""
    data = request.json
    required_fields = ["judul", "penulis", "deskripsi", "harga", "genre"]
    
    if not all(field in data for field in required_fields):
        return jsonify({"error": "Semua kolom wajib diisi"}), 400

    connection = get_db_connection()
    cursor = connection.cursor(dictionary=True)
    query = """
        INSERT INTO buku (judul, penulis, deskripsi, harga, genre)
        VALUES (%s, %s, %s, %s, %s)
    """
    cursor.execute(query, (data["judul"], data["penulis"], data["deskripsi"], data["harga"], data["genre"]))
    connection.commit()
    buku_id = cursor.lastrowid
    cursor.close()
    connection.close()
    return jsonify({"id": buku_id, **data}), 201

@app.route("/buku", methods=["GET"])
def read_buku():
    """Ambil semua buku."""
    connection = get_db_connection()
    cursor = connection.cursor(dictionary=True)
    query = "SELECT * FROM buku"
    cursor.execute(query)
    buku_list = cursor.fetchall()
    cursor.close()
    connection.close()
    return jsonify(buku_list)

@app.route("/buku/<int:buku_id>", methods=["GET"])
def read_buku_detail(buku_id):
    """Ambil detail buku berdasarkan ID."""
    connection = get_db_connection()
    cursor = connection.cursor(dictionary=True)
    query = "SELECT * FROM buku WHERE id = %s"
    cursor.execute(query, (buku_id,))
    buku = cursor.fetchone()
    cursor.close()
    connection.close()
    if not buku:
        abort(404, description="Buku tidak ditemukan")
    return jsonify(buku)

@app.route("/buku/<int:buku_id>", methods=["PUT"])
def update_buku(buku_id):
    """Perbarui buku."""
    data = request.json
    required_fields = ["judul", "penulis", "deskripsi", "harga", "genre"]
    
    if not all(field in data for field in required_fields):
        return jsonify({"error": "Semua kolom wajib diisi"}), 400

    connection = get_db_connection()
    cursor = connection.cursor(dictionary=True)
    query = """
        UPDATE buku
        SET judul = %s, penulis = %s, deskripsi = %s, harga = %s, genre = %s
        WHERE id = %s
    """
    cursor.execute(query, (data["judul"], data["penulis"], data["deskripsi"], data["harga"], data["genre"], buku_id))
    connection.commit()
    if cursor.rowcount == 0:
        cursor.close()
        connection.close()
        abort(404, description="Buku tidak ditemukan")
    cursor.close()
    connection.close()
    return jsonify({"id": buku_id, **data})

@app.route("/buku/<int:buku_id>", methods=["DELETE"])
def delete_buku(buku_id):
    """Hapus buku."""
    connection = get_db_connection()
    cursor = connection.cursor(dictionary=True)
    query = "DELETE FROM buku WHERE id = %s"
    cursor.execute(query, (buku_id,))
    connection.commit()
    if cursor.rowcount == 0:
        cursor.close()
        connection.close()
        abort(404, description="Buku tidak ditemukan")
    cursor.close()
    connection.close()
    return jsonify({"message": "Buku berhasil dihapus"}), 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000, debug=True)

Client :

import requests
import json

API_BASE_URL = "http://127.0.0.1:8000"

def print_response(response):
    """Print response data in a formatted way."""
    if response.status_code in [200, 201]:
        print(json.dumps(response.json(), indent=4))
    else:
        print(f"Error {response.status_code}: {response.text}")

def create_buku():
    """Send POST request to create a new book."""
    print("Masukkan detail buku:")
    judul = input("Judul: ")
    penulis = input("Penulis: ")
    deskripsi = input("Deskripsi: ")
    harga = float(input("Harga: "))
    genre = input("Genre: ")
    payload = {
        "judul": judul,
        "penulis": penulis,
        "deskripsi": deskripsi,
        "harga": harga,
        "genre": genre
    }
    response = requests.post(f"{API_BASE_URL}/buku", json=payload)
    print_response(response)

def read_all_buku():
    """Send GET request to fetch all books."""
    response = requests.get(f"{API_BASE_URL}/buku")
    print_response(response)

def read_buku_by_id():
    """Send GET request to fetch a book by ID."""
    buku_id = input("Masukkan ID buku: ")
    response = requests.get(f"{API_BASE_URL}/buku/{buku_id}")
    print_response(response)

def update_buku():
    """Send PUT request to update a book."""
    buku_id = input("Masukkan ID buku yang ingin diupdate: ")
    print("Masukkan detail buku yang diperbarui:")
    judul = input("Judul: ")
    penulis = input("Penulis: ")
    deskripsi = input("Deskripsi: ")
    harga = float(input("Harga: "))
    genre = input("Genre: ")
    payload = {
        "judul": judul,
        "penulis": penulis,
        "deskripsi": deskripsi,
        "harga": harga,
        "genre": genre
    }
    response = requests.put(f"{API_BASE_URL}/buku/{buku_id}", json=payload)
    print_response(response)

def delete_buku():
    """Send DELETE request to delete a book."""
    buku_id = input("Masukkan ID buku yang ingin dihapus: ")
    response = requests.delete(f"{API_BASE_URL}/buku/{buku_id}")
    print_response(response)

def main():
    """Main menu for CRUD operations."""
    while True:
        print("\nMenu:")
        print("1. Tambah Buku")
        print("2. Lihat Semua Buku")
        print("3. Lihat Buku Berdasarkan ID")
        print("4. Perbarui Buku")
        print("5. Hapus Buku")
        print("6. Keluar")
        choice = input("Masukkan pilihan Anda: ")
        
        if choice == "1":
            create_buku()
        elif choice == "2":
            read_all_buku()
        elif choice == "3":
            read_buku_by_id()
        elif choice == "4":
            update_buku()
        elif choice == "5":
            delete_buku()
        elif choice == "6":
            print("Keluar...")
            break
        else:
            print("Pilihan tidak valid. Silakan coba lagi.")

if __name__ == "__main__":
    main()

